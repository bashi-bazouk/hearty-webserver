// Generated by CoffeeScript 1.10.0
(function() {
  var Authenticator, Information, MessageBoard, PeerGraph, Resume, SubApplication, TechnicalWriting,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  SubApplication = require("./framework/SubApplication.coffee").SubApplication;

  Information = require("./subapplications/Information.coffee").Information;

  TechnicalWriting = require("./subapplications/technical_writing/TechnicalWriting.coffee").TechnicalWriting;

  MessageBoard = require("./subapplications/message_board/MessageBoard.coffee").MessageBoard;

  Resume = require("./subapplications/Resume.coffee").Resume;

  Authenticator = require("./subapplications/authenticator/Authenticator.coffee").Authenticator;

  PeerGraph = require("./subapplications/peer_graph/PeerGraph.coffee").PeerGraph;

  exports.Application = (function(superClass) {
    extend(Application, superClass);

    Application.prototype.routes = {
      '': "stop",
      ':route/': "default_navigation"
    };

    Application.prototype.subapplications = {
      information: Information,
      technical_writing: TechnicalWriting,
      message_board: MessageBoard,
      resume: Resume,
      authenticator: Authenticator,
      peer_graph: PeerGraph
    };

    function Application() {
      this.toggle_open = bind(this.toggle_open, this);
      this.is_closed = bind(this.is_closed, this);
      this.close = bind(this.close, this);
      this.open = bind(this.open, this);
      this.close_all = bind(this.close_all, this);
      this.default_navigation = bind(this.default_navigation, this);
      var name, ref, subapplication;
      Application.__super__.constructor.call(this, this.routes);
      this.pure = $("<div class=\"combine align-top\">\n	<div id=\"sidebar\" class=\"combine align-right\">\n		<div id=\"ne\"></div>\n		<div id=\"profile-picture\" class=\"cell\">\n			<img src=\"/cdn/images/profile_picture.jpg\">\n		</div>\n\n		<div id=\"navigator\" class=\"cell\" style=\"display: none\">\n			<a href=\"/information/\">Information</a>\n			<a href=\"/technical_writing/\">Technical Writing</a>\n			<a href=\"/message_board/\">Message Board</a>\n			<a href=\"/resume/\">Résumé</a>\n			<a href=\"/sign_in/\">Sign In</a>\n			<a href=\"/peer_graph/\">Peer Graph</a>\n		</div>\n\n	</div>\n</div>");
      this.sidebar = this.pure.find("#sidebar");
      this.profile_picture = this.sidebar.find("#profile-picture");
      this.navigator = this.sidebar.find("#navigator");
      ref = this.subapplications;
      for (name in ref) {
        SubApplication = ref[name];
        subapplication = new SubApplication(this);
        this[name] = subapplication;
        console.log("appending", name);
        subapplication.pure.appendTo(this.pure);
      }
      this.profile_picture.click((function(_this) {
        return function() {
          return _this.toggle_open();
        };
      })(this));
      this.intercept_internal_links();
      Backbone.history.start({
        pushState: true,
        silent: true
      });
    }

    Application.prototype.default_navigation = function(route) {
      console.log("in navigation", route);
      if (this.is_closed()) {
        this.open();
      }
      return this.close_all().then((function(_this) {
        return function() {
          switch (route) {
            case "message_board":
              return _this.message_board.open();
            case "information":
              return _this.information.open();
            case "technical_writing":
              console.log("opening technical", _this.technical);
              return _this.technical_writing.open();
            case "resume":
              return _this.resume.open();
            case "sign_in":
              _this.authenticator.reset();
              return _this.authenticator.open();
            case "sign_up":
              _this.authenticator.reset();
              return _this.authenticator.open();
            case "peer_graph":
              _this.peer_graph.reset();
              return _this.peer_graph.open();
            default:
              return console.warn("Unrecognized route: %s", route);
          }
        };
      })(this));
    };

    Application.prototype.close_all = function(callback) {
      var i, len, promises, ref, subapplication;
      console.log("in close_all");
      promises = [];
      ref = _(this.subapplications).keys();
      for (i = 0, len = ref.length; i < len; i++) {
        subapplication = ref[i];
        promises.push(new Promise((function(_this) {
          return function(resolve) {
            console.log("closing %s", subapplication);
            return _this[subapplication].close(resolve);
          };
        })(this)));
      }
      return Promise.all(promises).then(callback);
    };

    Application.prototype.open = function() {
      var fragment;
      this.navigator.slideDown(300);
      if ((fragment = Backbone.history.fragment) !== "") {
        return Backbone.history.loadUrl(fragment);
      }
    };

    Application.prototype.close = function() {
      this.close_all();
      return this.navigator.slideUp(300);
    };

    Application.prototype.is_closed = function() {
      return this.navigator.css('display') === "none";
    };

    Application.prototype.toggle_open = function() {
      if (this.is_closed()) {
        return this.open();
      } else {
        return this.close();
      }
    };

    Application.prototype.intercept_internal_links = function() {
      return $(document).on('click', (function(_this) {
        return function(event) {
          if (event.target.host === window.location.host) {
            event.preventDefault();
            return Backbone.history.navigate(event.target.pathname, {
              trigger: true
            });
          }
        };
      })(this));
    };

    return Application;

  })(SubApplication);

}).call(this);

//# sourceMappingURL=Application.js.map

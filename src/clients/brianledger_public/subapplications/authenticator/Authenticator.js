// Generated by CoffeeScript 1.10.0
(function() {
  var SubApplication,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  SubApplication = require("../../framework/SubApplication.coffee").SubApplication;

  if (window.api == null) {
    window.api = {};
  }

  api['account'] = function() {
    return {
      post: function(sign_in) {
        return new Promise(function(resolve, reject) {
          return d3.msgpack("/account").post(msgpack.encode(sign_in), function(error, data) {
            if (data != null) {
              return resolve(data);
            } else {
              return reject(error);
            }
          });
        });
      },
      put: function(sign_up) {
        return new Promise(function(resolve, reject) {
          return d3.msgpack("/account").send('PUT', msgpack.encode(sign_up), function(error, data) {
            if (data != null) {
              return resolve(data);
            } else {
              return reject(error);
            }
          });
        });
      }
    };
  };

  exports.Authenticator = (function(superClass) {
    extend(Authenticator, superClass);

    function Authenticator() {
      this.go_to_sign_up = bind(this.go_to_sign_up, this);
      this.go_to_sign_in = bind(this.go_to_sign_in, this);
      this.reset = bind(this.reset, this);
      this.is_closed = bind(this.is_closed, this);
      this.close = bind(this.close, this);
      this.open = bind(this.open, this);
      this.sign_up_error = bind(this.sign_up_error, this);
      this.sign_up_success = bind(this.sign_up_success, this);
      this.sign_in_error = bind(this.sign_in_error, this);
      this.sign_in_success = bind(this.sign_in_success, this);
      this.submit_sign_up = bind(this.submit_sign_up, this);
      this.submit_sign_in = bind(this.submit_sign_in, this);
      this.validate_sign_up = bind(this.validate_sign_up, this);
      this.validate_sign_in = bind(this.validate_sign_in, this);
      this.pure = $("<div id=\"authenticator\" class=\"cell\" style=\"width: 0; height: 0; margin: 0; padding: 0; border: none\">\n\n	<div id=\"sign-in\">\n		<div id=\"sign-in-with-email\">\n			<h1>Sign In</h1>\n			<div class=\"error\"></div>\n			<div class=\"info\">\n				<input id=\"email\" placeholder=\"Email\">\n				<input id=\"password\" type=\"password\" placeholder=\"Password\">\n			</div>\n			<div class=\"actions\">\n				<button id=\"go-to-sign-up\">Register</button>\n				<button id=\"submit-sign-in-with-email\" class=\"disabled\">Sign In</button>\n			</div>\n		</div>\n	</div>\n\n	<div id=\"sign-up\">\n		<div id=\"sign-up-with-email\">\n			<h1>Register</h1>\n			<div class=\"error\"></div>\n			<div class=\"info\">\n				<input id=\"name\" placeholder=\"Name\">\n				<input id=\"email\" placeholder=\"Email\">\n				<input type=\"password\" id=\"password\" placeholder=\"Password\">\n				<input type=\"password\" id=\"repeat-password\" placeholder=\"Repeat Password\">\n			</div>\n			<div class=\"actions\" style=\"width: unset\">\n				<button id=\"submit-sign-up-with-email\" class=\"disabled\">Register</button>\n			</div>\n		</div>\n	</div>\n</div>");
      this.sign_in = this.pure.find("#sign-in");
      this.sign_in_button = this.sign_in.find("#submit-sign-in-with-email");
      this.sign_in.find("#go-to-sign-up").click(function() {
        return Backbone.history.navigate("/sign_up/");
      });
      this.sign_in.find("#sign-in-with-email input").keyup((function(_this) {
        return function() {
          return _this.validate_sign_in();
        };
      })(this));
      this.sign_in_button.hover((function(_this) {
        return function() {
          return _this.sign_in.find(".error").css('visibility', "visible");
        };
      })(this));
      this.sign_in_button.click((function(_this) {
        return function() {
          return _this.submit_sign_in();
        };
      })(this));
      this.sign_up = this.pure.find("#sign-up");
      this.sign_up_button = this.sign_up.find("#submit-sign-up-with-email");
      this.sign_up.find("#sign-up-with-email input").keyup((function(_this) {
        return function() {
          return _this.validate_sign_up();
        };
      })(this));
      this.sign_up_button.hover((function(_this) {
        return function() {
          return _this.sign_up.find(".error").css('visibility', "visible");
        };
      })(this));
      this.sign_up_button.click((function(_this) {
        return function() {
          return _this.submit_sign_up();
        };
      })(this));
    }

    Authenticator.prototype.validate_sign_in = function(quiet, set_button) {
      var email, password, valid_email, valid_password;
      if (quiet == null) {
        quiet = true;
      }
      if (set_button == null) {
        set_button = true;
      }
      email = this.sign_in.find("#sign-in-with-email #email").val();
      password = this.sign_in.find("#sign-in-with-email #password").val();
      valid_email = /^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$/.test(email);
      valid_password = /^...+$/.test(password);
      if (valid_email && valid_password) {
        this.sign_in.find(".error").text("");
        if (set_button) {
          this.sign_in.find("#submit-sign-in-with-email").removeClass("disabled");
        }
        return {
          email: email,
          password: password
        };
      } else {
        if (!quiet) {
          if (!valid_email) {
            this.sign_in.find(".error").text("Invalid email address.");
          } else if (!valid_password) {
            this.sign_in.find(".error").text("Password must be more than 3 characters.");
          }
        }
        this.sign_in.find("#submit-sign-in-with-email").addClass("disabled");
        return null;
      }
    };

    Authenticator.prototype.validate_sign_up = function() {
      var disable_sign_up_button, email, error_text, name, password, passwords_match, repeat_password, valid_email, valid_name, valid_password;
      name = this.sign_up.find("#sign-up-with-email #name").val();
      email = this.sign_up.find("#sign-up-with-email #email").val();
      password = this.sign_up.find("#sign-up-with-email #password").val();
      repeat_password = this.sign_up.find("#sign-up-with-email #repeat-password").val();
      valid_name = /^[^\\\/?%*:|"<>\.]*$/.test(name);
      valid_email = /^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$/.test(email);
      valid_password = /^...+$/.test(password);
      passwords_match = password === repeat_password;
      error_text = (function(_this) {
        return function(t) {
          return _this.sign_up.find(".error").text(t);
        };
      })(this);
      disable_sign_up_button = (function(_this) {
        return function() {
          return _this.sign_up.find("#submit-sign-up-with-email").addClass("disabled");
        };
      })(this);
      if (!valid_name) {
        error_text("A name cannot contain any of \/?%*:|\"<>.");
        disable_sign_up_button();
      } else if (!valid_email) {
        error_text("Please provide a valid email address.");
        disable_sign_up_button();
      } else if (!valid_password) {
        error_text("A password should have 4 or more characters.");
        disable_sign_up_button();
      } else if (!passwords_match) {
        error_text("Passwords do not match. Did you make a mistake?");
        disable_sign_up_button();
      } else {
        error_text("");
        this.sign_up.find("#submit-sign-up-with-email").removeClass("disabled");
        return {
          name: name,
          email: email,
          password: password
        };
      }
      return null;
    };

    Authenticator.prototype.submit_sign_in = function() {
      var sign_in_request;
      sign_in_request = this.validate_sign_in(false);
      if (sign_in_request != null) {
        return api.account().post(sign_in_request).then(((function(_this) {
          return function(info) {
            return _this.sign_in_success(info);
          };
        })(this)), (function(_this) {
          return function(error) {
            return _this.sign_in_error(error);
          };
        })(this));
      }
    };

    Authenticator.prototype.submit_sign_up = function() {
      var sign_up_request;
      sign_up_request = this.validate_sign_up(false);
      if (sign_up_request != null) {
        return api.account().put(sign_up_request).then(((function(_this) {
          return function() {
            return _this.sign_up_success();
          };
        })(this)), (function(_this) {
          return function(error) {
            return _this.sign_up_error(error);
          };
        })(this));
      }
    };

    Authenticator.prototype.sign_in_success = function(account) {
      this.account = account;
      return console.log("Sign in got success", this.account);
    };

    Authenticator.prototype.sign_in_error = function(error) {
      console.log("Sign in got error", error);
      switch (error.status) {
        case 401:
          return this.sign_in.find(".error").text("There is no account for these credentials.");
        default:
          return console.warn("uncaught error code", error.status);
      }
    };

    Authenticator.prototype.sign_up_success = function() {
      return console.log("all signed up!");
    };

    Authenticator.prototype.sign_up_error = function(error) {
      return console.log("sign up got error", error);
    };

    Authenticator.prototype.open = function(callback) {
      if (this.pure.css('width') !== "0px") {
        return typeof callback === "function" ? callback() : void 0;
      }
      return this.pure.animate({
        width: "25rem",
        height: "25rem",
        margin: "1px",
        padding: "4px"
      }, 300, (function(_this) {
        return function() {
          _this.pure.css({
            border: "1px solid gray"
          });
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    };

    Authenticator.prototype.close = function(callback) {
      if (this.pure.css('width') === "0px") {
        return typeof callback === "function" ? callback() : void 0;
      }
      return this.pure.animate({
        width: 0,
        height: 0,
        margin: 0,
        padding: 0
      }, 300, (function(_this) {
        return function() {
          _this.pure.css({
            border: "none"
          });
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    };

    Authenticator.prototype.is_closed = function() {
      return this.pure.css('width') === "0px";
    };

    Authenticator.prototype.reset = function() {
      switch (location.pathname) {
        case "/sign-in/":
          if (!this.sign_in.is(":first-child")) {
            if (this.is_closed()) {
              return this.sign_in.detach().prependTo(this.pure);
            } else {
              return this.go_to_sign_in();
            }
          }
          break;
        case "/sign-up/":
          if (!this.sign_up.is(":first-child")) {
            if (this.is_closed()) {
              return this.sign_up.detach().prependTo(this.pure);
            } else {
              return this.go_to_sign_up();
            }
          }
          break;
        default:
          return console.warn("unrecognized route", location.hash);
      }
    };

    Authenticator.prototype.go_to_sign_in = function(jump) {
      if (jump == null) {
        jump = false;
      }
      if (this.sign_in.is(":first-child")) {
        return;
      }
      if (jump) {
        return this.sign_in.detach().prependTo(this.pure);
      } else {
        return this.pure.animate({
          opacity: 0
        }, 150, (function(_this) {
          return function() {
            _this.sign_in.detach().prependTo(_this.pure);
            return setTimeout((function() {
              return _this.pure.animate({
                opacity: 1
              }, 150);
            }), 100);
          };
        })(this));
      }
    };

    Authenticator.prototype.go_to_sign_up = function(jump) {
      if (jump == null) {
        jump = false;
      }
      if (this.sign_up.is(":first-child")) {
        return;
      }
      if (jump) {
        return this.sign_up.detach().prependTo(this.pure);
      } else {
        return this.pure.animate({
          opacity: 0
        }, 150, (function(_this) {
          return function() {
            _this.sign_up.detach().prependTo(_this.pure);
            return setTimeout((function() {
              return _this.pure.animate({
                opacity: 1
              }, 150);
            }), 100);
          };
        })(this));
      }
    };

    return Authenticator;

  })(SubApplication);

}).call(this);

//# sourceMappingURL=authenticator.js.map

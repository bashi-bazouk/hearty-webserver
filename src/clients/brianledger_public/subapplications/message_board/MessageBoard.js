// Generated by CoffeeScript 1.10.0
(function() {
  var Message, SubApplication,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  SubApplication = require("../../framework/SubApplication.coffee").SubApplication;

  Message = require("./Message.coffee").Message;

  if (window.api == null) {
    window.api = {};
  }

  api['message_board'] = {
    message: function(name) {
      if (name == null) {
        name = "";
      }
      return {
        get: function() {
          return new Promise(function(resolve, reject) {
            return d3.msgpack("/message_board/message/" + name, function(error, data) {
              if (data != null) {
                return resolve(data);
              } else {
                return reject(error);
              }
            });
          });
        },
        post: function(data) {
          return new Promise(function(resolve, reject) {
            if (name) {
              name = "/" + name;
            }
            return d3.msgpack("/message_board/message" + name).post(msgpack.encode(data), function(error, data) {
              if (data != null) {
                return resolve(data);
              } else {
                return reject(error);
              }
            });
          });
        }
      };
    }
  };

  exports.MessageBoard = (function(superClass) {
    extend(MessageBoard, superClass);

    function MessageBoard() {
      this.close = bind(this.close, this);
      this.open = bind(this.open, this);
      this.check_input = bind(this.check_input, this);
      this.post_message = bind(this.post_message, this);
      this.load_messages = bind(this.load_messages, this);
      this.pure = $("<div id=\"message-board\" class=\"combine align-top\" style=\"max-width: 0; max-height: 0\">\n	<div id=\"messages\"></div>\n	<button id=\"post-message\" disabled >Post</button>\n</div>");
      this.messages = this.pure.find("#messages");
      this.post = this.pure.find("#post-message");
      this.initial_message = new Message();
      this.initial_message.keyup((function(_this) {
        return function() {
          return _this.check_input();
        };
      })(this));
      this.initial_message.pure.prependTo(this.messages);
      this.post.click((function(_this) {
        return function() {
          return _this.post_message();
        };
      })(this));
      this.load_messages();
    }

    MessageBoard.prototype.load_messages = function() {
      return api.message_board.message("*").get().then((function(_this) {
        return function(messages) {
          var content, i, id, len, message, message_pairs, ref, results;
          message_pairs = _(messages).pairs().map(function(arg) {
            var data, name;
            name = arg[0], data = arg[1];
            return [name.split(" - "), data['content']];
          });
          message_pairs = _(message_pairs).sortBy(function(name) {
            return -parseInt(name[0]);
          });
          results = [];
          for (i = 0, len = message_pairs.length; i < len; i++) {
            ref = message_pairs[i], id = ref[0], content = ref[1];
            message = new Message();
            message.pure.removeAttr('contentEditable');
            message.pure.html(content);
            results.push(message.pure.appendTo(_this.messages));
          }
          return results;
        };
      })(this));
    };

    MessageBoard.prototype.post_message = function() {
      var message, ref;
      ref = this.initial_message.cleave(this.post.outerHeight()), this.initial_message = ref[0], message = ref[1];
      message.pure.removeAttr('id');
      message.pure.off('keyup');
      this.initial_message.pure.attr('id', "message");
      this.initial_message.keyup((function(_this) {
        return function() {
          return _this.check_input();
        };
      })(this));
      return api.message_board.message().post(message.json());
    };

    MessageBoard.prototype.check_input = function() {
      var message;
      message = this.initial_message.json();
      if (message.content.length > 3) {
        return this.post.removeAttr('disabled');
      } else {
        return this.post.attr('disabled', "");
      }
    };

    MessageBoard.prototype.open = function() {
      var pure_outer_width;
      pure_outer_width = this.pure.outerWidth();
      if (pure_outer_width !== 0) {
        return;
      }
      this.pure.css({
        display: "flex",
        'border-left': "1px solid gray"
      });
      return this.pure.animate({
        'max-height': this.pure_outer_height || "100vh"
      }, 350, "linear", (function(_this) {
        return function() {
          _this.pure.css({
            'border-left': "none"
          });
          return _this.pure.animate({
            'max-width': _this.pure_outer_width || "100vw"
          }, 150, "linear", function() {
            return _this.pure.css({
              'max-width': "",
              'max-height': ""
            });
          });
        };
      })(this));
    };

    MessageBoard.prototype.close = function(callback) {
      this.pure_outer_width = this.pure.outerWidth();
      this.pure_outer_height = this.pure.outerHeight();
      if (this.pure_outer_width === 0) {
        return typeof callback === "function" ? callback() : void 0;
      }
      this.pure.css({
        'max-height': this.pure_outer_height,
        'max-width': this.pure_outer_width
      });
      return this.pure.animate({
        'max-height': 0
      }, 300, "swing", (function(_this) {
        return function() {
          _this.pure.css({
            'border-top': "1px solid gray"
          });
          return _this.pure.animate({
            'max-width': 0
          }, 100, "swing", function() {
            _this.pure.css({
              display: "none",
              'border-top': "none"
            });
            return typeof callback === "function" ? callback() : void 0;
          });
        };
      })(this));
    };

    return MessageBoard;

  })(SubApplication);

}).call(this);

//# sourceMappingURL=message_board.js.map

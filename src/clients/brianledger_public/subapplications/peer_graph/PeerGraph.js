// Generated by CoffeeScript 1.10.0
(function() {
  var SubApplication,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  SubApplication = require("../../framework/SubApplication.coffee").SubApplication;

  if (window.api == null) {
    window.api = {};
  }

  api['gossip'] = function() {
    return {
      get: function() {
        return new Promise(function(resolve, reject) {
          return $.getJSON("/gossip/", null, resolve);
        });
      },
      connect: function() {
        return new Promise(function(resolve, reject) {
          var ws;
          ws = new WebSocket("wss://" + window.location.host + "/gossip/", []);
          return ws.onopen = function() {
            return resolve(ws);
          };
        });
      }
    };
  };

  exports.PeerGraph = (function(superClass) {
    extend(PeerGraph, superClass);

    function PeerGraph() {
      this.pure = $("<div class=\"peer-graph\">SEED DATA</div>");
      api.gossip().get().then((function(_this) {
        return function(gossip) {
          return _this.pure.text(gossip);
        };
      })(this));
      api.gossip().connect().then((function(_this) {
        return function(gossip_channel) {
          return console.log("Fwaaaa!", gossip_channel);
        };
      })(this));
    }

    PeerGraph.prototype.open = function(callback) {
      return typeof callback === "function" ? callback() : void 0;
    };

    PeerGraph.prototype.close = function(callback) {
      return typeof callback === "function" ? callback() : void 0;
    };

    return PeerGraph;

  })(SubApplication);

}).call(this);

//# sourceMappingURL=PeerGraph.js.map

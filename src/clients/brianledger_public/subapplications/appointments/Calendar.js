// Generated by CoffeeScript 1.10.0
(function() {
  var Calendar,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Calendar = (function() {
    var weekday;

    weekday = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];

    function Calendar(pure) {
      var i, len, ref;
      this.pure = pure != null ? pure : $("<div id=\"calendar\">\n	<div id=\"weekdays\">\n		<div id=\"#sunday\" class=\"weekday\"></div>\n		<div id=\"#monday\" class=\"weekday\"></div>\n		<div id=\"#tuesday\" class=\"weekday\"></div>\n		<div id=\"#wednesday\" class=\"weekday\"></div>\n		<div id=\"#thursday\" class=\"weekday\"></div>\n		<div id=\"#friday\" class=\"weekday\"></div>\n		<div id=\"#saturday\" class=\"weekday\"></div>\n	</div>\n	<div id=\"tags\"></div>\n</div>");
      this.on_click = bind(this.on_click, this);
      this.double_size = bind(this.double_size, this);
      this.handle_passing_fence = bind(this.handle_passing_fence, this);
      this.generate_month = bind(this.generate_month, this);
      this.reset = bind(this.reset, this);
      this.close = bind(this.close, this);
      this.open = bind(this.open, this);
      ref = Calendar.weekday;
      for (i = 0, len = ref.length; i < len; i++) {
        weekday = ref[i];
        this[weekday] = this.pure.find("#" + weekday);
      }
      this.pure.find("#weekdays").click((function(_this) {
        return function(event) {
          return _this.on_click(event);
        };
      })(this));
      reset();
    }

    Calendar.prototype.open = function() {};

    Calendar.prototype.close = function() {};

    Calendar.prototype.reset = function() {
      var i, initial_month, len, ref, results, today;
      today = moment();
      if (this.date == null) {
        this.date = today.date();
      }
      if (this.month == null) {
        this.month = today.month();
      }
      if (this.year == null) {
        this.year = today.year();
      }
      this.pure.find(".weekday").empty();
      initial_month = generate_month(this.year, this.month);
      console.log("got initial month", initial_month);
      ref = Calendar.weekday;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        weekday = ref[i];
        results.push(this[weekday].append(initial_month[weekday]));
      }
      return results;
    };

    Calendar.prototype.generate_month = function(year, month) {
      var day, days, i, m, ref;
      m = moment().month(month).year(year);
      days = _.object((function() {
        var i, len, ref, results;
        ref = Calendar.weekday;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          weekday = ref[i];
          results.push([weekday, ""]);
        }
        return results;
      })());
      for (day = i = 1, ref = m.daysInMonth(); 1 <= ref ? i <= ref : i >= ref; day = 1 <= ref ? ++i : --i) {
        m.day(day);
        weekday = Calendar.weekday.indexOf(m.weekday());
        days[weekday] += "<div class=\"day\"\n	data-year=\"" + (m.year()) + "\"\n	data-month=\"" + (m.month()) + "\"\n	data-day=\"" + day + "\"></div>";
      }
      return days;
    };

    Calendar.prototype.handle_passing_fence = function() {};

    Calendar.prototype.double_size = function() {};

    Calendar.prototype.on_click = function(event) {
      return console.log("Got click event on calendar:", event);
    };

    return Calendar;

  })();

}).call(this);

//# sourceMappingURL=Calendar.js.map
